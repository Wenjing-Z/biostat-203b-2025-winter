---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 20 @ 11:59PM
author: "Wenjing Zhou and 806542441"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

1. Data preprocessing and feature engineering.

###Loading necessary libraries

```{r}
library(dplyr)
library(tidymodels)
library(vip)  # For variable importance
library(xgboost)
library(doParallel) # For parallel processing
```

```{r}
icu_data <- readRDS("mimic_icu_cohort.rds") %>%
    mutate(los_long = los > 2)
icu_data
```


Data cleaning

```{r}
icu_clean <- icu_data %>%
  select(-subject_id, -hadm_id, -stay_id, -last_careunit, -intime, -outtime, 
         -dischtime,-admittime, -admit_provider_id, -deathtime, -edregtime, 
         -edouttime, -dod) %>%
  select(-c(discharge_location, hospital_expire_flag, los)) %>%
  select(-c(anchor_year, anchor_year_group)) %>% # Remove future or unnecessary info
  mutate(
    los_long = factor(los_long, levels = c(FALSE, TRUE), labels = c("Yes", "No")),
    gender = factor(gender),
    marital_status = factor(marital_status),
    race = factor(race),
    first_careunit = factor(first_careunit)
  ) %>%
  drop_na()
```

2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.
```{r}
#Train-Test Split
set.seed(203)

data_split <- initial_split(
  icu_clean, 
  # stratify by los_long                          
  prop = 0.5, 
  strata = los_long
  )

train_data <- training(data_split)
test_data  <- testing(data_split)
```

```{r}
# 交叉验证也分层
set.seed(203)

folds <- vfold_cv(train_data, v = 5, strata = los_long)
icu_folds <- folds
```

```{r}
#recipe
#📌 4. 建立 Recipe
icu_recipe <- recipe(los_long ~ ., data = train_data) %>%
  step_novel(all_nominal_predictors()) %>%
  step_other(all_nominal_predictors(), threshold = 0.01) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_zv(all_predictors()) %>%    # 新增这一步去掉无用列
  step_normalize(all_numeric_predictors())  # Standardize numeric features
```

3. Train and tune the models using the training set.

Model 1 : Logistic regression + Elastic Net
##5. Logistic Regression (Elastic Net)

```{r}
log_reg_spec <- logistic_reg(
  penalty = tune(),
  mixture = tune()
) %>%
  set_engine("glmnet")

log_reg_workflow <- workflow() %>%
  add_model(log_reg_spec) %>%
  add_recipe(icu_recipe)

set.seed(123)

log_reg_grid_fine <- grid_regular(
  penalty(range = c(-6, -1)),  
  mixture(range = c(0, 1)),  
  levels = 5
)

log_reg_res_fine <- tune_grid(
  log_reg_workflow,
  resamples = vfold_cv(train_data, v = 5, strata = los_long),
  grid = log_reg_grid_fine,
  metrics = metric_set(roc_auc)
)


log_reg_res_fine %>% collect_metrics()
# 查看精调的最佳结果
log_reg_res_fine %>% show_best(metric = "roc_auc")
```

```{r}
# 选择最优模型参数
best_fine <- log_reg_res_fine %>% 
  select_best(metric = "roc_auc")

best_fine
```
```{r}

# 最终 workflow 确认
final_workflow_fine <- log_reg_workflow %>% 
  finalize_workflow(best_fine)

# 重新在完整训练集拟合最终模型
final_fit_fine <- final_workflow_fine %>% 
  last_fit(split = data_split)

# 评估在测试集上的性能
final_fit_fine %>% collect_metrics()

```



4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?
